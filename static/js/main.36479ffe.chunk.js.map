{"version":3,"sources":["components/Section.js","components/ContactListItem.js","components/ContactList.js","components/ContactEditor.js","components/Filter.js","components/App.js","index.js"],"names":["Section","title","children","defaultProps","ContactListItem","name","number","onRemove","type","className","onClick","ContactList","contacts","onRemovecontact","length","map","id","key","INIT","ContactEditor","state","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onAddContact","this","onSubmit","htmlFor","onChange","Component","Filter","onChangeFilter","PropTypes","string","App","filter","addContact","contact","uuidv4","find","alert","prevState","removeContact","contactId","changeFilter","getFilterName","toLowerCase","includes","savedContacts","localStorage","getItem","JSON","parse","setItem","stringify","filterContacts","ReactDOM","render","document","querySelector"],"mappings":"+RAGA,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,iCACE,4BAAKD,GACJC,GAKPF,EAAQG,aAAe,CACrBF,MAAO,IAMMD,QCCAI,EAjBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,SAAjB,OACtB,4BACE,8BACGF,EADH,KACWC,GAEX,4BAAQE,KAAK,SAASC,UAAU,YAAYC,QAASH,GAArD,YCyBWI,EA5BK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAC/B,OAAID,EAASE,OAAS,EAElB,4BACGF,EAASG,KAAI,gBAAGC,EAAH,EAAGA,GAAIX,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,kBAAC,EAAD,CACEW,IAAKD,EACLX,KAAMA,EACNC,OAAQA,EACRC,SAAU,kBAAMM,EAAgBG,UAK5B,M,wBCdVE,EAAO,CACXb,KAAM,GACNC,OAAQ,IAGWa,E,4MACnBC,MAAQF,E,EAERG,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRjB,EAAgBiB,EAAhBjB,KAAMkB,EAAUD,EAAVC,MACd,EAAKC,SAAL,eACGnB,EAAOkB,K,EAIZE,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAKC,MAAMC,aAAa,EAAKT,OAC7B,EAAKI,SAASN,I,uDAGN,IAAD,EACkBY,KAAKV,MAAtBf,EADD,EACCA,KAAMC,EADP,EACOA,OACd,OACE,oCACE,yCACA,0BAAMyB,SAAUD,KAAKL,cACnB,2BAAOO,QAAQ,QAAf,OAEE,6BACA,2BACExB,KAAK,OACLe,MAAOlB,EACP4B,SAAUH,KAAKT,aACfhB,KAAK,UAGT,2BAAO2B,QAAQ,UAAf,SAEE,6BACA,2BACExB,KAAK,OACLe,MAAOjB,EACP2B,SAAUH,KAAKT,aACfhB,KAAK,YAGT,4BAAQG,KAAK,UAAb,qB,GA3CiC0B,aCP5B,SAASC,EAAT,GAA4C,IAA1BZ,EAAyB,EAAzBA,MAAOa,EAAkB,EAAlBA,eACtC,OACE,6BACE,2CACA,2BACE5B,KAAK,OACLe,MAAOA,EACPU,SAAU,gBAAGX,EAAH,EAAGA,OAAH,OAAgBc,EAAed,EAAOC,WDiDxDZ,EAAY0B,UAAY,CACtBhC,KAAMgC,IAAUC,OAChBhC,OAAQ+B,IAAUC,Q,YEpDCC,E,4MACnBnB,MAAQ,CACNR,SAAU,GACV4B,OAAQ,I,EAkBVC,WAAa,YAAuB,IAApBpC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACdoC,EAAU,CACd1B,GAAI2B,eACJtC,OACAC,UAGe,EAAKc,MAAMR,SAASgC,MACnC,SAACF,GAAD,OAAaA,EAAQrC,OAASA,KAG9BwC,MAAM,GAAD,OAAIxC,EAAJ,+BAEL,EAAKmB,UAAS,SAACsB,GACb,MAAO,CAAElC,SAAS,GAAD,mBAAMkC,EAAUlC,UAAhB,CAA0B8B,S,EAKjDK,cAAgB,SAACC,GACf,EAAKxB,UAAS,SAACsB,GACb,MAAO,CACLlC,SAAUkC,EAAUlC,SAAS4B,QAAO,qBAAGxB,KAAgBgC,U,EAK7DC,aAAe,SAACT,GACd,EAAKhB,SAAS,CAAEgB,Y,EAElBU,cAAgB,WAAO,IAAD,EACS,EAAK9B,MAA1BR,EADY,EACZA,SAAU4B,EADE,EACFA,OAClB,OAAO5B,EAAS4B,QAAO,SAACE,GAAD,OACrBA,EAAQrC,KAAK8C,cAAcC,SAASZ,EAAOW,mB,kEA/C7C,IAAME,EAAgBC,aAAaC,QAAQ,YACvCF,GACFvB,KAAKN,SAAS,CACZZ,SAAU4C,KAAKC,MAAMJ,O,yCAKRP,GACbA,EAAUlC,WAAakB,KAAKV,MAAMR,UACpC0C,aAAaI,QAAQ,WAAYF,KAAKG,UAAU7B,KAAKV,MAAMR,a,+BAyCrD,IACA4B,EAAWV,KAAKV,MAAhBoB,OACFoB,EAAiB9B,KAAKoB,gBAC5B,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAerB,aAAcC,KAAKW,aAClC,wCAECmB,EAAe9C,OAAS,GACvB,kBAACqB,EAAD,CAAQZ,MAAOiB,EAAQJ,eAAgBN,KAAKmB,eAG9C,kBAAC,EAAD,CACErC,SAAUgD,EACV/C,gBAAiBiB,KAAKiB,qB,GAxECb,aCJjC2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.36479ffe.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.defaultProps = {\n  title: '',\n};\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number, onRemove }) => (\n  <li>\n    <span>\n      {name}: {number}\n    </span>\n    <button type=\"button\" className=\"deleteBtn\" onClick={onRemove}>\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ContactListItem from './ContactListItem';\n\nconst ContactList = ({ contacts, onRemovecontact }) => {\n  if (contacts.length > 0) {\n    return (\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onRemove={() => onRemovecontact(id)}\n          />\n        ))}\n      </ul>\n    );\n  } else return null;\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemovecontact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ContactList from './ContactList';\n\nconst INIT = {\n  name: '',\n  number: '',\n};\n\nexport default class ContactEditor extends Component {\n  state = INIT;\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onAddContact(this.state);\n    this.setState(INIT);\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\">\n            Name\n            <br />\n            <input\n              type=\"text\"\n              value={name}\n              onChange={this.handleChange}\n              name=\"name\"\n            />\n          </label>\n          <label htmlFor=\"number\">\n            Number\n            <br />\n            <input\n              type=\"text\"\n              value={number}\n              onChange={this.handleChange}\n              name=\"number\"\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </>\n    );\n  }\n}\nContactList.PropTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Filter({ value, onChangeFilter }) {\n  return (\n    <div>\n      <span>Find name</span>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={({ target }) => onChangeFilter(target.value)}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nimport Section from \"./Section\";\nimport ContactList from \"./ContactList\";\nimport ContactEditor from \"./ContactEditor\";\nimport Filter from \"./Filter\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const savedContacts = localStorage.getItem(\"contacts\");\n    if (savedContacts) {\n      this.setState({\n        contacts: JSON.parse(savedContacts),\n      });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    const UnicName = this.state.contacts.find(\n      (contact) => contact.name === name\n    );\n    if (UnicName) {\n      alert(`${name} is already in contacts!!!`);\n    } else {\n      this.setState((prevState) => {\n        return { contacts: [...prevState.contacts, contact] };\n      });\n    }\n  };\n\n  removeContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  changeFilter = (filter) => {\n    this.setState({ filter });\n  };\n  getFilterName = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filterContacts = this.getFilterName();\n    return (\n      <Section>\n        <ContactEditor onAddContact={this.addContact} />\n        <h2>Contacts</h2>\n\n        {filterContacts.length > 0 && (\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        )}\n\n        <ContactList\n          contacts={filterContacts}\n          onRemovecontact={this.removeContact}\n        />\n      </Section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}